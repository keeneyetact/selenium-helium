<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.heliumhq</groupId>
		<artifactId>helium</artifactId>
		<version>2.0.4-SNAPSHOT</version>
	</parent>
	<artifactId>helium-python</artifactId>
	<packaging>pom</packaging>
	<properties>
		<selenium.version>3.0.1</selenium.version>
		<inttestIncludes>inttest_.*</inttestIncludes>
		<apitestIncludes>apitest_.*</apitestIncludes>
		<systestIncludes>systest_.*</systestIncludes>
		<parentBasedir>${basedir}/..</parentBasedir>
	</properties>
	<profiles>
		<profile>
			<id>integrationtests</id>
			<activation>
				<activeByDefault>true</activeByDefault>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec-maven-plugin.version}</version>
						<executions>
							<execution>
								<id>perform-integrationtests</id>
								<phase>integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>nosetests</executable>
									<workingDirectory>
										${basedir}
									</workingDirectory>
									<arguments>
										<argument>
											--where=${basedir}/src/integrationtest/python
										</argument>
										<argument>
											--include=${inttestIncludes}
										</argument>
										<argument>--verbose</argument>
										<argument>--nocapture</argument>
										<!--nose runs the integration tests twice if -->
										<!--we omit this flag: -->
										<argument>
											--no-path-adjustment
										</argument>
										<!--Stop running tests after the first error -->
										<!--or failure -->
										<argument>--stop</argument>
										<!--Disable millions of lines of comtypes -->
										<!--debug output on test failure -->
										<argument>--nologcapture</argument>
									</arguments>
									<environmentVariables>
										<PYTHONPATH>
											${heliumPythonInttestPythonpath}
										</PYTHONPATH>
									</environmentVariables>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>chrome</id>
			<activation>
				<activeByDefault>true</activeByDefault>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec-maven-plugin.version}</version>
						<executions>
							<execution>
								<id>perform-api-integrationtests-chrome</id>
								<phase>integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>nosetests</executable>
									<workingDirectory>
										${basedir}
									</workingDirectory>
									<arguments>
										<argument>
											--where=${basedir}/src/integrationtest/python
										</argument>
										<argument>
											--include=${apitestIncludes}
										</argument>
										<argument>--verbose</argument>
										<argument>--nocapture</argument>
										<!--nose runs the integration tests twice if -->
										<!--we omit this flag: -->
										<argument>
											--no-path-adjustment
										</argument>
										<!--Stop running tests after the first error -->
										<!--or failure -->
										<argument>--stop</argument>
										<!--Disable millions of lines of comtypes -->
										<!--debug output on test failure -->
										<argument>--nologcapture</argument>
									</arguments>
									<environmentVariables>
										<PYTHONPATH>
											${heliumPythonApitestPythonpath}
										</PYTHONPATH>
									</environmentVariables>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>firefox</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec-maven-plugin.version}</version>
						<executions>
							<execution>
								<id>perform-api-integrationtests-firefox</id>
								<phase>integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>nosetests</executable>
									<workingDirectory>
										${basedir}
									</workingDirectory>
									<arguments>
										<argument>
											--where=${basedir}/src/integrationtest/python
										</argument>
										<argument>
											--include=${apitestIncludes}
										</argument>
										<argument>--verbose</argument>
										<argument>--nocapture</argument>
										<!--nose runs the integration tests twice if -->
										<!--we omit this flag: -->
										<argument>
											--no-path-adjustment
										</argument>
										<!--Stop running tests after the first error -->
										<!--or failure -->
										<argument>--stop</argument>
										<!--Disable millions of lines of comtypes -->
										<!--debug output on test failure -->
										<argument>--nologcapture</argument>
									</arguments>
									<environmentVariables>
										<PYTHONPATH>
											${heliumPythonApitestPythonpath}
										</PYTHONPATH>
										<TEST_BROWSER>firefox</TEST_BROWSER>
									</environmentVariables>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>ie</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec-maven-plugin.version}</version>
						<executions>
							<execution>
								<id>perform-api-integrationtests-ie</id>
								<phase>integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>nosetests</executable>
									<workingDirectory>
										${basedir}
									</workingDirectory>
									<arguments>
										<argument>
											--where=${basedir}/src/integrationtest/python
										</argument>
										<argument>
											--include=${apitestIncludes}
										</argument>
										<argument>--verbose</argument>
										<argument>--nocapture</argument>
										<!--nose runs the integration tests twice if -->
										<!--we omit this flag: -->
										<argument>
											--no-path-adjustment
										</argument>
										<!--Stop running tests after the first error -->
										<!--or failure -->
										<argument>--stop</argument>
										<!--Disable millions of lines of comtypes -->
										<!--debug output on test failure -->
										<argument>--nologcapture</argument>
									</arguments>
									<environmentVariables>
										<PYTHONPATH>
											${heliumPythonApitestPythonpath}
										</PYTHONPATH>
										<TEST_BROWSER>ie</TEST_BROWSER>
									</environmentVariables>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<build>
		<finalName>${project.artifactId}-${project.version}</finalName>
		<outputDirectory>${project.build.directory}/dist-base</outputDirectory>
		<testOutputDirectory>
			${project.build.directory}/test-dist
		</testOutputDirectory>
		<plugins>
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>${basedir}</directory>
							<includes>
								<include>target/</include>
								<include>**/*.log</include>
								<include>**/*.pyo</include>
								<include>**/*.pyc</include>
							</includes>
							<followSymlinks>false</followSymlinks>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>${exec-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>initialize</id>
						<phase>initialize</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>python</executable>
							<workingDirectory>${basedir}</workingDirectory>
							<arguments>
								<argument>build.py</argument>
								<argument>initialize</argument>
								<argument>${selenium.version}</argument>
								<argument>${pkcs1.version}</argument>
								<argument>${decorator.version}</argument>
								<argument>${psutil.version}</argument>
							</arguments>
							<environmentVariables>
								<PYTHONPATH>${buildPythonpath}</PYTHONPATH>
							</environmentVariables>
						</configuration>
					</execution>
					<execution>
						<id>perform-unittests</id>
						<phase>test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>nosetests</executable>
							<workingDirectory>${basedir}</workingDirectory>
							<arguments>
								<argument>
									--where=src/unittest/python
								</argument>
								<argument>--verbose</argument>
								<argument>--nocapture</argument>
								<!--Stop running tests after the first error -->
								<!--or failure -->
								<argument>--stop</argument>
								<!--Disable millions of lines of comtypes -->
								<!--debug output on test failure -->
								<argument>--nologcapture</argument>
							</arguments>
							<environmentVariables>
								<PYTHONPATH>
									${heliumPythonUnittestPythonpath}
								</PYTHONPATH>
							</environmentVariables>
						</configuration>
					</execution>
					<execution>
						<id>perform-systemtests</id>
						<phase>integration-test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>nosetests</executable>
							<workingDirectory>${basedir}</workingDirectory>
							<arguments>
								<argument>
									--where=src/systemtest/python
								</argument>
								<argument>
									--include=${systestIncludes}
								</argument>
								<argument>--verbose</argument>
								<argument>--nocapture</argument>
								<!--nose runs the system tests twice if we -->
								<!--omit this flag: -->
								<argument>--no-path-adjustment</argument>
								<!--Stop running tests after the first error -->
								<!--or failure -->
								<argument>--stop</argument>
								<!--Disable millions of lines of comtypes -->
								<!--debug output on test failure -->
								<argument>--nologcapture</argument>
							</arguments>
							<environmentVariables>
								<PYTHONPATH>${heliumPythonSystestPythonpath}</PYTHONPATH>
							</environmentVariables>
						</configuration>
					</execution>
					<execution>
						<id>generate-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>python</executable>
							<workingDirectory>${basedir}</workingDirectory>
							<arguments>
								<argument>build.py</argument>
								<argument>generate_sources</argument>
								<argument>${project.version}</argument>
								<argument>${selenium.version}</argument>
								<argument>${pkcs1.version}</argument>
								<argument>${decorator.version}</argument>
								<argument>${psutil.version}</argument>
							</arguments>
							<environmentVariables>
								<PYTHONPATH>
									${buildPythonpath}
								</PYTHONPATH>
							</environmentVariables>
						</configuration>
					</execution>
					<execution>
						<id>process-sources</id>
						<phase>process-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>python</executable>
							<workingDirectory>${basedir}</workingDirectory>
							<arguments>
								<argument>build.py</argument>
								<argument>process_sources</argument>
							</arguments>
							<environmentVariables>
								<PYTHONPATH>
									${buildPythonpath}
								</PYTHONPATH>
							</environmentVariables>
						</configuration>
					</execution>
					<execution>
						<id>generate-resources</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>python</executable>
							<workingDirectory>${basedir}</workingDirectory>
							<arguments>
								<argument>build.py</argument>
								<argument>generate_resources</argument>
								<argument>${project.version}</argument>
								<argument>${buildType}</argument>
							</arguments>
							<environmentVariables>
								<PYTHONPATH>
									${buildPythonpath}
								</PYTHONPATH>
							</environmentVariables>
						</configuration>
					</execution>
					<execution>
						<id>process-resources</id>
						<phase>process-resources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>python</executable>
							<workingDirectory>${basedir}</workingDirectory>
							<arguments>
								<argument>build.py</argument>
								<argument>process_resources</argument>
								<argument>${selenium.version}</argument>
							</arguments>
							<environmentVariables>
								<PYTHONPATH>
									${buildPythonpath}
								</PYTHONPATH>
							</environmentVariables>
						</configuration>
					</execution>
					<execution>
						<id>prepare-package</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>python</executable>
							<workingDirectory>${basedir}</workingDirectory>
							<arguments>
								<argument>build.py</argument>
								<argument>prepare_package</argument>
							</arguments>
							<environmentVariables>
								<PYTHONPATH>
									${buildPythonpath}
								</PYTHONPATH>
							</environmentVariables>
						</configuration>
					</execution>
					<execution>
						<id>pre-integration-test</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>python</executable>
							<workingDirectory>${basedir}</workingDirectory>
							<arguments>
								<argument>build.py</argument>
								<argument>pre_integration_test</argument>
								<argument>${project.version}</argument>
							</arguments>
							<environmentVariables>
								<PYTHONPATH>
									${buildPythonpath}
								</PYTHONPATH>
							</environmentVariables>
						</configuration>
					</execution>
					<execution>
						<id>install-site-dependencies</id>
						<phase>pre-site</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>pip</executable>
							<workingDirectory>${basedir}</workingDirectory>
							<arguments>
								<argument>install</argument>
								<argument>sphinx==1.3.1</argument>
								<argument>-q</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>generate-sources-for-site</id>
						<phase>pre-site</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>python</executable>
							<workingDirectory>${basedir}</workingDirectory>
							<arguments>
								<argument>build.py</argument>
								<argument>generate_sources</argument>
								<argument>${project.version}</argument>
								<argument>${selenium.version}</argument>
								<argument>${pkcs1.version}</argument>
								<argument>${decorator.version}</argument>
								<argument>${psutil.version}</argument>
							</arguments>
							<environmentVariables>
								<PYTHONPATH>
									${buildPythonpath}
								</PYTHONPATH>
							</environmentVariables>
						</configuration>
					</execution>
					<execution>
						<id>process-sources-for-site</id>
						<phase>pre-site</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>python</executable>
							<workingDirectory>${basedir}</workingDirectory>
							<arguments>
								<argument>build.py</argument>
								<argument>process_sources</argument>
							</arguments>
							<environmentVariables>
								<PYTHONPATH>
									${buildPythonpath}
								</PYTHONPATH>
							</environmentVariables>
						</configuration>
					</execution>
					<execution>
						<id>generate-api-docs</id>
						<phase>site</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>make</executable>
							<workingDirectory>
								${basedir}/src/site/docs
							</workingDirectory>
							<arguments>
								<argument>html</argument>
								<!--Ensure Sphinx fails if it can't find a-->
								<!--module, eg. because of an incorrect-->
								<!--PYTHONPATH.-->
								<argument>-W</argument>
							</arguments>
							<environmentVariables>
								<PYTHONPATH>
									${heliumPythonMainPythonpath}
								</PYTHONPATH>
							</environmentVariables>
						</configuration>
					</execution>
					<execution>
						<id>generate-api-docs-latex</id>
						<phase>site</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>make</executable>
							<workingDirectory>
								${basedir}/src/site/docs
							</workingDirectory>
							<arguments>
								<argument>latex</argument>
								<argument>-D</argument>
								<argument>release=${project.version}</argument>
								<!--Ensure Sphinx fails if it can't find a-->
								<!--module, eg. because of an incorrect-->
								<!--PYTHONPATH.-->
								<argument>-W</argument>
							</arguments>
							<environmentVariables>
								<PYTHONPATH>
									${heliumPythonMainPythonpath}
								</PYTHONPATH>
							</environmentVariables>
						</configuration>
					</execution>
					<execution>
						<id>generate-api-docs-pdf-first</id>
						<phase>site</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>pdflatex</executable>
							<workingDirectory>
								${project.build.directory}/site/docs/latex
							</workingDirectory>
							<arguments>
								<argument>-quiet</argument>
								<argument>
									${project.build.directory}/site/docs/latex/HeliumAPIDocumentation.tex
								</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>generate-api-docs-pdf-second</id>
						<phase>site</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>pdflatex</executable>
							<workingDirectory>
								${project.build.directory}/site/docs/latex
							</workingDirectory>
							<arguments>
								<argument>-quiet</argument>
								<argument>
									${project.build.directory}/site/docs/latex/HeliumAPIDocumentation.tex
								</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<delimiters>
						<delimiter>${*}</delimiter>
					</delimiters>
					<useDefaultDelimiters>false</useDefaultDelimiters>
					<outputDirectory>
						${project.build.outputDirectory}
					</outputDirectory>
					<resources>
						<resource>
							<directory>
								${basedir}/src/main/resources/base
							</directory>
							<includes>
								<include>license.txt</include>
							</includes>
							<excludes>
								<exclude>setup.py</exclude>
							</excludes>
							<filtering>true</filtering>
						</resource>
						<resource>
							<directory>
								${basedir}/src/main/resources/base
							</directory>
							<excludes>
								<exclude>license.txt</exclude>
								<exclude>setup.py</exclude>
								<exclude>**/*.pyc</exclude>
							</excludes>
							<filtering>false</filtering>
						</resource>
					</resources>
				</configuration>
				<executions>
					<execution>
						<id>default-resources</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
					</execution>
					<execution>
						<id>copy-systest-config</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>
								${project.build.testOutputDirectory}
							</outputDirectory>
							<resources>
								<resource>
									<directory>
										${parentBasedir}/src/systemtest/resources
									</directory>
									<includes>
										<include>license.key</include>
									</includes>
									<filtering>false</filtering>
									<targetPath>heliumlib/helium/data</targetPath>
								</resource>
								<resource>
									<directory>
										${parentBasedir}/src/systemtest/resources
									</directory>
									<includes>
										<include>
											Helium_unreachable_server.ini
										</include>
										<include>
											Helium_future_build.ini
										</include>
									</includes>
									<filtering>true</filtering>
									<targetPath>heliumlib/helium/data</targetPath>
								</resource>
							</resources>
							<filters>
								<filter>
									${parentBasedir}/src/systemtest/filters/filter-systemtest.properties
								</filter>
							</filters>
						</configuration>
					</execution>
					<execution>
						<id>copy-license-key</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${user.home}</outputDirectory>
							<resources>
								<resource>
									<directory>
										${parentBasedir}/src/systemtest/resources
									</directory>
									<includes>
										<include>license.key</include>
									</includes>
									<filtering>false</filtering>
									<targetPath>.helium</targetPath>
								</resource>
							</resources>
							<overwrite>true</overwrite>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.4</version>
				<executions>
					<execution>
						<id>package-individual-platforms</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>
									${basedir}/src/main/assembly/win.xml
								</descriptor>
								<descriptor>
									${basedir}/src/main/assembly/macosx.xml
								</descriptor>
								<descriptor>
									${basedir}/src/main/assembly/linux.xml
								</descriptor>
							</descriptors>
							<outputDirectory>
								${project.build.directory}
							</outputDirectory>
							<appendAssemblyId>true</appendAssemblyId>
						</configuration>
					</execution>
					<execution>
						<id>prepare-pip-dist-for-upload-to-pypi</id>
						<phase>install</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>
									${basedir}/src/main/assembly/pip.xml
								</descriptor>
							</descriptors>
							<outputDirectory>
								${project.build.directory}
							</outputDirectory>
							<appendAssemblyId>false</appendAssemblyId>
							<attach>false</attach>
							<finalName>pip-dist</finalName>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
